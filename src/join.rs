// In rust we code
// In code we trust
// AgarthaSoftware - 2024

use std::error::Error;
use std::fs;
use serde::{Deserialize, Serialize};

use crate::init;

#[derive(Serialize, Deserialize, Clone, Debug)]
struct Network {
    pub name: String,
    pub peers: Vec<String>,
}

impl Network {
    pub fn new(peers: Vec<String>, name: String) -> Self {
        Self {
            name,
            peers,
        }
    }

    #[must_use]
    pub fn write<S>(&self, path: S) -> Result<(), Box<dyn Error>> where S: AsRef<std::path::Path> {
        let mut serialized = toml::to_string(&self)?;
        serialized.insert_str(0, "# This file is automatically generated and replicated\n# Modifying it will lead to errors\n");
        fs::write(&path, &serialized)?;
        Ok(())
    }
}

#[must_use]
pub fn join(path: &std::path::PathBuf, url: String) -> Result<(), Box<dyn Error>> {
    let split = url.split(':');
    let slice = &(split.collect::<Vec<_>>())[..];
    if let [address_str, network_name_str] = *slice {
        println!("passed: {:?}", slice);
        init::init(path, network_name_str)?;
        let network = Network::new(vec!(address_str.to_owned()), network_name_str.to_owned());
        network.write((&path).join(".wormhole/network.toml"))?;
        return Ok(());
    } else {
        println!("errored: {:?}", slice);
    }
    Err(Box::new(std::io::Error::new(std::io::ErrorKind::InvalidData, "url invalid")))
}
