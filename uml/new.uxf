<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>510</x><y>810</y><w>210</w><h>170</h></coordinates><panel_attributes>Pod
--
-logical_manager: LogicalManager
-mount_point: UniPath
-peers: Vec&lt;PeerIPC&gt;
-pod_conf: &lt;&lt;PodConf&gt;&gt;
-&lt;&lt;network thread&gt;&gt;
--
Connect()
ReloadConf()
Disconnect()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>220</x><y>640</y><w>350</w><h>130</h></coordinates><panel_attributes>_object: PeerIPC_
--
pub address: String
pub thread: &lt;&lt; tokio::task::JoinHandle&lt;()&gt; &gt;&gt;
pub sender: &lt;&lt; mpsc::UnboundedSender&lt;NetworkMessage&gt; &gt;&gt;
--
Connect
AcceptConnection</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>390</x><y>760</y><w>190</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>170;50;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>0</x><y>680</y><w>240</w><h>50</h></coordinates><panel_attributes>lt=[("sender" to send to other peer)]&lt;-

</panel_attributes><additional_attributes>100;20;220;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>810</x><y>640</y><w>310</w><h>70</h></coordinates><panel_attributes>_type: Arborescence_
--
Arc&lt;Vec&lt;Mutex&lt;HashMap&lt;u64, WhMeta&gt;\&gt;&gt;
u64 : FILE INODE</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>170</x><y>0</y><w>270</w><h>240</h></coordinates><panel_attributes>Note :
WhMeta :
	Data relative to a file useful to Wormhole, like
	- path
	- hosted_at
	- ...
--
FileMeta (or any other name) :
	Real file metadata, like :
	- date of creation / modification
	- access permissions
	- ...
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>910</x><y>470</y><w>210</w><h>70</h></coordinates><panel_attributes>_object: WhMeta_
--
path: UniPath (WhPath)
host: Vec&lt;String&gt; (IPs)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>450</x><y>0</y><w>270</w><h>240</h></coordinates><panel_attributes>Note :
WhPath :
	Used to describe a path relative to Wormhole.
	Ex :
		file at /home/wh/folder/file
		Wormhole mount at /home/wh/
		WhPath = /folder/file
	This is not a type but merely a name.
	Isn't Node dependant

Absolute Path :
	Full path from the local node / to the on disk file.
--
UniPath :
	The custom PathBuf like structure
	made for our needs.
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>500</y><w>260</w><h>50</h></coordinates><panel_attributes>lt=[Pods having the most recent version]&lt;-

</panel_attributes><additional_attributes>110;20;240;20</additional_attributes></element><element><id>Relation</id><coordinates><x>940</x><y>530</y><w>90</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;110;70;10</additional_attributes></element><element><id>Relation</id><coordinates><x>940</x><y>700</y><w>40</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;110;20;10</additional_attributes></element><element><id>UMLInterface</id><coordinates><x>2330</x><y>1310</y><w>20</w><h>70</h></coordinates><panel_attributes></panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>510</x><y>1040</y><w>210</w><h>70</h></coordinates><panel_attributes>_object: Service_
--
pods: Vec&lt;Pod&gt;</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>10</x><y>1160</y><w>280</w><h>100</h></coordinates><panel_attributes>_CLI_
--
Could be a local communication by pipes :
https://github.com/kotauskas/interprocess

Or using network the same way we do
for inter-pod comm</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>280</x><y>1040</y><w>250</w><h>200</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;not defined&gt;&gt;</panel_attributes><additional_attributes>230;10;10;180</additional_attributes></element><element><id>Relation</id><coordinates><x>610</x><y>970</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>730</x><y>0</y><w>270</w><h>240</h></coordinates><panel_attributes>Todo :
store additionnal metadata like
where are the replicas stored
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>910</x><y>810</y><w>360</w><h>430</h></coordinates><panel_attributes>_LogicalManager_
--
receive files actions requests from
network and local

If necessary, firstly check request validity
on the Arborescence / WhMeta
Then (if requested) execute the action on disk
via DiskManager

Manage logical operations like cache / replicas

--
- arbo: Arc&lt;Mutex&lt;Arborescence&gt;&gt;
- mount_point: UniPath
- disk: Arc&lt;DiskManager&gt;
- network_sender: &lt;&lt; UnboundedSender&lt;NetworkMessage&gt; &gt;&gt;
- next_inode: u64

- network_airport_handle: JoinHandle&lt;()&gt;

--

network_airport(Arc&lt;Mutex&lt;Arborescence&gt;&gt; arbo, nw_rx)
/!\ have an arc mutex on the LogicalManager's arbo





</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1250</x><y>590</y><w>150</w><h>160</h></coordinates><panel_attributes>_DiskManager_
--
OS-specific replica of
needed std::fs functions

--
_Linux :_
handle: Dir (openat)

_Windows :_
?</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>710</x><y>800</y><w>220</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;30;200;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1190</x><y>630</y><w>80</w><h>200</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;180;60;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>1330</x><y>700</y><w>130</w><h>70</h></coordinates><panel_attributes>Exposed functions
are the same on
every os
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1780</x><y>900</y><w>290</w><h>120</h></coordinates><panel_attributes>_Fuse (fuser FileSystem impl)_
--
implement all the functions requested by fuser
--
orchestrator: Arc&lt;Orchestrator&gt;
--

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1340</x><y>830</y><w>370</w><h>380</h></coordinates><panel_attributes>Orchestrator
--
contains files functions similares
but less primitives as DiskManager

Entities like fuser directly use
functions defined here when needed

these functions interract with the
arborescence to answer

if a modification is needed they
check the validity using the
arborescence then
inform the network using
network_sender

equivalent of current provider's
writers / readers functions

on write, messages the &lt;&lt; DelayedWorker &gt;&gt;

--
disk: Arc&lt;DiskManager&gt;
arbo: Arc&lt;Mutex&lt;Arborescence&gt;&gt;
network_sender: &lt;&lt; UnboundedSender&lt;NetworkMessage&gt; &gt;&gt;
--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>1850</x><y>970</y><w>160</w><h>60</h></coordinates><panel_attributes>The windows equivalent
should also use the
orchestrator
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1340</x><y>1240</y><w>370</w><h>380</h></coordinates><panel_attributes>DelayedWorker
--
Worker that take care of all operations that don't need
a direct response. by example :
- replicas
- automaticly moving data between nodes

--
disk: Arc&lt;DiskManager&gt;
arbo: Arc&lt;Mutex&lt;Arborescence&gt;&gt;
network_sender: &lt;&lt; UnboundedSender&lt;NetworkMessage&gt; &gt;&gt;
--
</panel_attributes><additional_attributes></additional_attributes></element></diagram>