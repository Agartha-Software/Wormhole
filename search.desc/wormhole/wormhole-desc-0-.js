searchState.loadedDescShard("wormhole", 0, "Wormhole\nRemove the pod from the network and delete any data that …\nRemove the pod from the network without losing any data on …\nGet the hosts of a given file\nInspect the basic informations of a given pod\nCreate a new pod and if possible join a network, otherwise …\nRemove a pod from its network and stop it\nSimply remove the pod from the network without losing any …\nChecks if the service is working\nRemove this pod from the network without distributing its …\nDisplay the file tree at a given pod or path and show the …\nAdditional hosts to try to join from as a backup\nNames of all configuration files that you want to restore\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nName for this pod to use as a machine name with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUrl this Pod reports to other to reach it\nMount point to create the pod in. By default creates a …\nMount point to create the pod in. By default creates a …\nName of the pod\nName of the pod to create\nName of the pod to create\nPath of the pod\nPath of the file\nLocal port for the pod to use. By default automatically …\nSpecify a specific service socket in case of multiple …\nNetwork to join\nNOTE To add elements in the configuration file : To create …\nnetwork urls to join the netwoek from\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhostnames of known peers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname of the network\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the error value\nSuccess with a simple message\nContains the success value\nContains the success value\nSuccess with a message and additional data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens for CLI calls and launch one tcp instance per cli …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMessage Coming from Network Messages recived by peers, …\nMessage Content Represent the content of the intern …\nMessage going to the redundancy worker\nParent, New Parent, Name, New Name, overwrite\nMessage Going To Network Messages sent from fuser to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShould be extended until meeting fuser::FileType\ntodo: replace usage of InodeId with Ino when no parallel …\nInsert a given Inode inside the local arbo\nCreate a new Inode from the given parameters and insert it …\nAdd hosts to an inode\nTime of last access\nBlock size\nSize in blocks\nTime of creation (macOS only)\nTime of last change\nFlags (macOS only, see chflags(2))\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGroup id\nInode number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKind of file (directory, file, pipe, etc)\nTime of last modification\nAdd hosts to an inode\nRecursively traverse the Arbo tree from the Inode to form …\nRemove inode from the Arbo\nNumber of hard links\nPermissions\nRdev\nRemove hosts from an inode\nSize in bytes\nUser id\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget an entry return Ok(None) if no permissions to access …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty Inode, define its informations and …\nRename a file, by changing its name but usually not its ino\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError describing the read syscall\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError describing the removal of a [Inode] from the Arbo …\nError describing the removal of a [Inode] from the Arbo\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError describing the removal of a [Inode] from the Arbo …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError describing the write syscall\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a new inode, add the requested entry to the arbo and …\nRemove Inode from the Arbo\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTODO: Doc when reviews are finished\nAdd the requested entry to the arbo and inform the network\nRemove Inode from the Arbo and inform the network of the …\nError describing the read syscall\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRedundancy Worker Worker that applies the redundancy to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGive the last element of the path\nReturns all but the last element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the requested path is in the original path\nJoin the current path with a new segment. If the segment …\nAdd a segment to the current WhPath. If the segment starts …\nRemove the requested part …\nChange the path for “path”\nModify the path to match the new name. Can only modify the …\nChange the path for “/path”\nPut or not a ‘/’ at the end\nChange the path for “./path”")